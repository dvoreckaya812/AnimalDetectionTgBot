import base64
import threading
import time
from multiprocessing.pool import ThreadPool
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, InputMediaVideo
from telebot.apihelper import ApiTelegramException
import requests
import json
from config import BOT_KEY, HOST, NAMES, SUPPORTED_IMAGE_EXT, SUPPORTED_VIDEO_EXT


bot = TeleBot(BOT_KEY)
IMAGE_COMMANDS = ['üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö', '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö']
VIDEO_COMMANDS = ['üé• –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞ –≤–∏–¥–µ–æ', '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞ –≤–∏–¥–µ–æ']
INFO_COMMANDS = ['‚ùì –°–ø—Ä–∞–≤–∫–∞', '–°–ø—Ä–∞–≤–∫–∞', '–ò–Ω—Ñ–æ']


def update_loading(message):
    try:
        while True:
            time.sleep(1)
            message = bot.edit_message_text("‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è", message.chat.id, message.id)
            time.sleep(1)
            message = bot.edit_message_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", message.chat.id, message.id)
            time.sleep(1)
            message = bot.edit_message_text("‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..", message.chat.id, message.id)
            time.sleep(1)
            message = bot.edit_message_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...", message.chat.id, message.id)
    except ApiTelegramException:
        pass


def get_animals(data):
    if len(data) == 0:
        return "<pre>–ñ–∏–≤–æ—Ç–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</pre>"
    animals = ""
    for c in data:
        animals += "<b>" + NAMES[c] + "</b>, "
    animals = animals[:-2]
    return animals


def get_file(file):
    file_info = bot.get_file(file)
    downloaded_file = bot.download_file(file_info.file_path)
    return downloaded_file


def _image_handler(image):
    response = requests.post(HOST + "/image-animal-detection", data=image,
                            headers={'content-type': 'image/jpeg'})
    json_data = json.loads(response.text)
    animals = get_animals(json_data['classes'])
    image = base64.b64decode(json_data['media'])
    return animals, image


def _video_handler(video):
    response = requests.post(HOST + "/video-animal-detection", data=video,
                             headers={'content-type': 'video/mp4'})
    json_data = json.loads(response.text)
    animals = get_animals(json_data['classes'])
    video = base64.b64decode(json_data['media'])
    return animals, video


def get_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, input_field_placeholder='–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª...')
    menu.add(KeyboardButton("üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö"), KeyboardButton("üé• –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞ –≤–∏–¥–µ–æ"))
    menu.add("‚ùì –°–ø—Ä–∞–≤–∫–∞", row_width=2)
    return menu


@bot.message_handler(commands=['start'])
def start_bot_handler(message):
    menu = get_menu()
    text = "üñêüèª <pre>–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é —è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç.</pre>\n" \
           "üõ°Ô∏è <b>–ú–æ–µ–π –∑–∞–¥–∞—á–µ–π —è–≤–ª—è–µ—Ç—Å—è –ø–æ–º–æ—â—å –ª—é–¥—è–º.</b>\n" \
           "‚òÄÔ∏è <i>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –∏—Å–∫–∞—Ç—å –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–∞ –≤–∏–¥–µ–æ" \
           "–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö.</i>"
    bot.send_message(message.chat.id, text, reply_markup=menu, parse_mode='HTML')


@bot.message_handler(content_types=['photo'])
def image_handler(message):
    file = message.photo[len(message.photo) - 1].file_id
    downloaded_file = get_file(file)
    animals, image = _image_handler(downloaded_file)
    bot.send_photo(message.chat.id, image,
                   "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ: {}".format(animals), parse_mode='HTML')


@bot.message_handler(content_types=['video'])
def video_handler(message):
    msg = bot.send_message(message.chat.id, "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", parse_mode='HTML')
    update_thread = threading.Thread(target=update_loading, args=(msg,))
    update_thread.start()
    downloaded_file = get_file(message.video.file_id)
    animals, video = _video_handler(downloaded_file)
    update_thread.join(0)

    bot.delete_message(msg.chat.id, msg.id)
    bot.send_video(message.chat.id, video,
                   caption="–ù–∞ –≤–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ: {}".format(animals), parse_mode='HTML')


@bot.message_handler(content_types=['document'])
def document_handler(message):
    file_info = bot.get_file(message.document.file_id)
    file_ext = file_info.file_path.split(".")[1]
    downloaded_file = bot.download_file(file_info.file_path)
    if file_ext in SUPPORTED_VIDEO_EXT:
        animals, video = _video_handler(downloaded_file)
        bot.send_video(message.chat.id, video,
                       caption="–ù–∞ –≤–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ: {}".format(animals), parse_mode='HTML')
    elif file_ext in SUPPORTED_IMAGE_EXT:
        animals, image = _image_handler(downloaded_file)
        bot.send_photo(message.chat.id, image,
                       "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ: {}".format(animals), parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "<pre>–î–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</pre>", parse_mode='HTML')


@bot.message_handler(func=lambda m: True if m.text in IMAGE_COMMANDS else False)
def image_detection_info(message):
    text = "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç.\n\n" \
           "<b>–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20/40* –ú–±</b>" \
           "<i>(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)</i>\n\n" \
           "<i>*—Å –ø–æ–¥–ø–∏—Å–∫–æ–π Telegram Premium</i>"
    bot.send_message(message.chat.id, text, parse_mode='HTML')


@bot.message_handler(func=lambda m: True if m.text in VIDEO_COMMANDS else False)
def video_detection_info(message):
    text = "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –≤ —á–∞—Ç.\n\n" \
           "<b>–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20/40* –ú–±</b>" \
           "<i>(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)</i>\n\n" \
           "<i>*—Å –ø–æ–¥–ø–∏—Å–∫–æ–π Telegram Premium</i>"
    bot.send_message(message.chat.id, text, parse_mode='HTML')


@bot.message_handler(func=lambda m: True if m.text in INFO_COMMANDS else False)
def info(message):
    text = "<pre>–î–∞–Ω–Ω—ã–π —á–∞—Ç-–±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é –∂–∏–≤–æ—Ç–Ω—ã—Ö.</pre>\n\n" \
           "üåê <b>–°–∞–π—Ç: http://127.0.0.1:5001/</b>\n\n" \
           "üí¨ <b>–ü–û —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–∞–∑–µ –§–ì–ë–û–£ –í–û '–ë–ì–ò–¢–£'.</b>"
    bot.send_message(message.chat.id, text, parse_mode='HTML')


@bot.message_handler(content_types=['text'])
def all_text_handler(message):
    text = "<pre>–•–æ—Ç—å —è –∏ —è–≤–ª—è—é—Å—å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å " \
           "–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª—é–±–æ–µ –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ —è –Ω–µ –º–æ–≥—É.</pre>\n\n" \
           "<b>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ª–∏–±–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–µ–Ω—é, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª.</b>"
    menu = get_menu()
    bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=menu)


bot.infinity_polling()
